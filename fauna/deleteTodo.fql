{
  ref: Function("deleteTodo"),
  ts: 1618671633730000,
  name: "deleteTodo",
  body: Query(
    Lambda(
      ["userId", "uId", "parentUid"],
      Let(
        {
          todoId: Select(
            ["data", 0, "ref", "id"],
            Call(Function("findByUid"), Var("uId"))
          ),
          parentTodoId: Select(
            ["data", 0, "ref", "id"],
            Call(Function("findByUid"), [Var("parentUid")]),
            0
          )
        },
        If(
          Call(Function("canOperate"), [Var("userId"), Var("uId")]),
          If(
            Equals(Var("parentTodoId"), 0),
            Do(
              Call(Function("recursiveDelete"), Var("todoId")),
              '{ "statusCode": 200, "msg": "deleted"}'
            ),
            Let(
              {
                parentData: Select(
                  ["data"],
                  Get(Ref(Collection("Todo"), Var("parentTodoId")))
                ),
                parentSubTodos: Select(["subtodos"], Var("parentData"), []),
                updatedSubTodosArray: Difference(Var("parentSubTodos"), [
                  Ref(Collection("Todo"), Var("todoId"))
                ])
              },
              Do(
                Update(Ref(Collection("Todo"), Var("parentTodoId")), {
                  data: Merge(Var("parentData"), {
                    subtodos: Var("updatedSubTodosArray")
                  })
                }),
                Call(Function("recursiveDelete"), Var("todoId")),
                '{ "statusCode": 200, "msg": "deleted"}'
              )
            )
          ),
          '{ "statusCode": 401, "msg": "cannot perform this operation" }'
        )
      )
    )
  ),
  data: {
    gql: {
      ts: Time("2021-04-17T15:00:33.305670Z"),
      meta: {
        location: "Mutation",
        field: {
          name: "deleteTodo",
          directives: [
            { name: "resolver", args: { name: "deleteTodo", paginated: false } }
          ],
          type: { NotNull: { Named: "String" } },
          arguments: [
            { name: "userId", type: { NotNull: { Named: "ID" } } },
            { name: "id", type: { NotNull: { Named: "ID" } } },
            { name: "parentId", type: { Named: "ID" } }
          ]
        }
      }
    }
  }
}