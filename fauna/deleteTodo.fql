{
  ref: Function("deleteTodo"),
  ts: 1615647751600000,
  name: "deleteTodo",
  body: Query(
    Lambda(
      ["uId", "parentUid"],
      Let(
        {
          todoId: Select(
            ["data", 0, "ref", "id"],
            Call(Function("findByUid"), Var("uId"))
          ),
          parentTodoId: Select(
            ["data", 0, "ref", "id"],
            Call(Function("findByUid"), [Var("parentUid")]),
            0
          )
        },
        If(
          Equals(Var("parentTodoId"), 0),
          Call(Function("recursiveDelete"), Var("todoId")),
          Let(
            {
              parentData: Select(
                ["data"],
                Get(Ref(Collection("Todo"), Var("parentTodoId")))
              ),
              parentSubTodos: Select(["subtodos"], Var("parentData"), []),
              updatedSubTodosArray: Difference(Var("parentSubTodos"), [
                Ref(Collection("Todo"), Var("todoId"))
              ])
            },
            Do(
              Update(Ref(Collection("Todo"), Var("parentTodoId")), {
                data: Merge(Var("parentData"), {
                  subtodos: Var("updatedSubTodosArray")
                })
              }),
              Call(Function("recursiveDelete"), Var("todoId")),
              Get(Ref(Collection("Todo"), Var("parentTodoId")))
            )
          )
        )
      )
    )
  ),
  data: {
    gql: {
      ts: Time("2021-03-13T14:18:35.906527Z"),
      meta: {
        location: "Mutation",
        field: {
          name: "deleteTodo",
          directives: [
            { name: "resolver", args: { name: "deleteTodo", paginated: false } }
          ],
          type: { NotNull: { Named: "Todo" } },
          arguments: [
            { name: "id", type: { NotNull: { Named: "ID" } } },
            { name: "parentId", type: { Named: "ID" } }
          ]
        }
      }
    }
  }
}