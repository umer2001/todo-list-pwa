{
  ref: Function("create_sub_todo"),
  ts: 1618671633730000,
  name: "create_sub_todo",
  body: Query(
    Lambda(
      ["userId", "parentUid", "subTodoData"],
      Let(
        {
          parentTodo: Select(
            [0, "data"],
            Call(Function("findByUid"), Var("parentUid"))
          ),
          parentTodoId: Select(
            [0, "ref", "id"],
            Call(Function("findByUid"), Var("parentUid"))
          ),
          parentSubTodos: Select(["subtodos"], Var("parentTodo"), []),
          addOwnerToSubTodoData: Merge(Var("subTodoData"), {
            owner: Ref(Collection("User"), Var("userId"))
          }),
          newSubTodo: Create(Collection("Todo"), {
            data: Var("addOwnerToSubTodoData")
          }),
          newSubTodoRef: Select(["ref"], Var("newSubTodo")),
          newParentSubTodoArray: Append(
            Var("newSubTodoRef"),
            Var("parentSubTodos")
          ),
          newParentTodo: Merge(Var("parentTodo"), {
            subtodos: Var("newParentSubTodoArray")
          }),
          updateresponse: Update(Ref(Collection("Todo"), Var("parentTodoId")), {
            data: Var("newParentTodo")
          })
        },
        Var("newSubTodo")
      )
    )
  ),
  data: {
    gql: {
      ts: Time("2021-04-17T15:00:33.305670Z"),
      meta: {
        location: "Mutation",
        field: {
          name: "createSubTodo",
          directives: [
            {
              name: "resolver",
              args: { name: "create_sub_todo", paginated: false }
            }
          ],
          type: { NotNull: { Named: "Todo" } },
          arguments: [
            { name: "userId", type: { NotNull: { Named: "ID" } } },
            { name: "parentId", type: { NotNull: { Named: "ID" } } },
            { name: "newData", type: { NotNull: { Named: "TodoInput" } } }
          ]
        }
      }
    }
  }
}